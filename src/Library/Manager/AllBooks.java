/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Library.Manager;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Siyam
 */
public class AllBooks extends javax.swing.JFrame {

    private final DBCollection users;
    private final MongoClient mongoClient;
    private final DB db;
    DefaultTableModel model;
    
    /**
     * Creates new form AllStudents
     */
    
    public AllBooks() {
        initComponents();
        mongoClient = new MongoClient("localhost", 27017);
        db = mongoClient.getDB("Library_Manager");
        users = db.getCollection("users");
        System.out.println("db connection ok");
        this.setTitle("All Books Information");
        refreshTble();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAllBooks = new javax.swing.JTable();
        buttonSave = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        buttonRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableAllBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book Name", "Author", "Genre", "Year", "Availability"
            }
        ));
        tableAllBooks.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableAllBooks);

        buttonSave.setText("UPDATE");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonDelete.setText("DELETE");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        jButton1.setText("ADD");
        jButton1.setMaximumSize(new java.awt.Dimension(57, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(57, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(57, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("LIBRARY MANAGER");

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave)
                    .addComponent(buttonDelete)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRefresh))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:

        int size = tableAllBooks.getRowCount();
        for (int i = 0; i < size; i++) {
            DBObject dBObject = new BasicDBObject();
            BasicDBObject whereQuery = new BasicDBObject();
            whereQuery.put("Author", model.getValueAt(i, 1));
            dBObject = users.findOne(whereQuery);
            dBObject.put("BookName", model.getValueAt(i, 0).toString().toUpperCase());
            dBObject.put("Genre", model.getValueAt(i, 2));
            dBObject.put("Year", model.getValueAt(i, 3));
            dBObject.put("Availability", model.getValueAt(i, 4));
            users.save(dBObject);
            System.out.println("saved");
        }
        refreshTble();
        JOptionPane.showMessageDialog(rootPane, "Database Updated.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:

        if (tableAllBooks.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "No Book Entry Selected.", "Warning!", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                
                int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are You Sure?");
                if (showConfirmDialog == 0) {
                        DBObject dBObject = new BasicDBObject();
                        BasicDBObject whereQuery = new BasicDBObject();
                        whereQuery.put("BookName", model.getValueAt(tableAllBooks.getSelectedRow(), 0));
                        dBObject = users.findOne(whereQuery);
                        users.remove(dBObject);
                        System.out.println("deleted");
                }
            } catch (Exception e) {
                System.out.println("delete button: " + e);
            }
        }
        refreshTble();
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         AddNewBooks newBook = new AddNewBooks();
          newBook.setVisible(true);
        newBook.setResizable(false);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dim.getWidth() - newBook.getWidth()) / 2);
        int y = 50;
        newBook.setLocation(x, y);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        // TODO add your handling code here:
        refreshTble();
    }//GEN-LAST:event_buttonRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAllBooks;
    // End of variables declaration//GEN-END:variables

    private void refreshTble() {

        model = (DefaultTableModel) tableAllBooks.getModel();
        model.setRowCount(0);
        DBCursor cur = users.find();
        while (cur.hasNext()) {
            DBObject ob = cur.next();
            model.addRow(new Object[]{ob.get("BookName"), ob.get("Author"), ob.get("Genre"), ob.get("Year"), ob.get("Availability")});
        }
    }
}
